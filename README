Command abserve implements a minimal HTTP server that serves an “abstract”
resource directly from memory.

    % echo 'Hello, world!' | abserve -l :80 &
    % curl localhost
    Hello, world!


Options and arguments

Parsing conforms to the tradition of getopts.

    abserve [options] [--] [<path>]

The optional argument <path> is the URL path at which the abstract resource
must be served. If omitted, defaults to “/”. For convenience, a starting “/”
is implicit if not present.

The options act as follows.

    -l, --listen <address>:<port>

Binds the server to the given address and port. Default is “:8080”.

    -d, --directory <directory>

Serves any resource from <directory>, like a typical server. If
<directory>/<path> exists, it's overridden.

    -p, --poll <file>

Reads the abstract resource from <file>, which must be a FIFO (named pipe).
After that, polls <file> repeatedly (by re-opening for reading) to fetch
newer versions.

    -h, --help

Prints a usage message to standard error.


Behavior

The server runs in the same process as abserve, until interrupted. The exit
status is one of:

    0  on interrupt
    1  on runtime error
    2  on usage error or -h/--help


Examples

The simplest uses are:

    cmd ... | abserve  # Sink-in input from another command.
    abserve < file     # Read input from a file.

The interesting ones involve the -p/--poll option, which lets us refresh the
abstract resource without restarting the server. The files used with
-p/--poll must be FIFOs:

    % mkfifo fifo      # Create a FIFO.
    % abserve -p fifo  # Won't serve anything until fifo is written to!
    ^C

A typical scenario is this. We have a resource to serve that can change over
time. We launch abserve in the background in poll mode and write the first
version of the resource to the FIFO. Then we submit updates by rewriting to
the FIFO. For example:

    % echo 'PING LOG' > log
    % mkfifo fifo
    % abserve -l :80 -p fifo & cat log > fifo
    [1] 5474
    % for (( i = 0; i < 288; i++ )); do
    >     sleep 300
    >     echo '* * * * *' >> log
    >     date >> log
    >     ping -c5 10.0.3.1 >> log
    >     cat log > fifo  # Submit.
    > done
